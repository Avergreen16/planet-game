g++ src/main.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -o bin\main

g++ src/map_edit.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -o bin\map_edit
g++ src/text_engine.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -o bin\text_engine
g++ src/save_translator.cpp -std=c++20 -l mingw32 -o bin\save_translator
g++ src/double_dabble.cpp -std=c++20 -l mingw32 -o bin\double_dabble
g++ src/text_data_translator.cpp -std=c++20 -l mingw32 -o bin\text_data_translator
g++ src/qoi_encoder.cpp -std=c++20 -I include -l mingw32 -o bin\qoi_encoder
g++ src/qoi_decoder.cpp -std=c++20 -I include -l mingw32 -o bin\qoi_decoder
g++ src/binary_comp.cpp -std=c++20 -I include -l mingw32 -o bin\bin_comp
g++ src/huffman_code.cpp -std=c++20 -I include -l mingw32 -o bin\huffman_code
g++ src/png_comp.cpp -std=c++20 -I include -l mingw32 -o bin\png_comp
g++ src/hex_editor.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -l comdlg32 -l libstdc++ -o bin\hex_editor
g++ src/windialog.cpp -std=c++20 -l mingw32 -o bin\windialog
g++ -mwindows src/hex_quiz.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -l libstdc++ -o bin\hex_quiz

g++ -mwindows src/time.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -l libstdc++ -o bin\time

g++ src2/main.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -l comdlg32 -l libstdc++ -o bin\hexedit

g++ src_gravsim/gravsim.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -l comdlg32 -l libstdc++ -o bin\gravsim

g++ src_water/main.cpp src/glad.c -std=c++20 -I include -L lib -l mingw32 -l glfw3 -l opengl32 -l gdi32 -l comdlg32 -l libstdc++ -o bin\water

clang++ src/windialog.cpp -std=c++20 -o bin\windialog.exe

clang++ src/time.cpp src/glad.c -std=c++20 -I include -L lib -l msvcrt -l user32 -l shell32 -l gdi32 -l glfw3 -l opengl32 -o bin\time.exe

/*const char* vss_raycast = R"""(
#version 460 core
layout(location = 0) in vec2 pos;

void main() {
    gl_Position = vec4(pos, 0.0, 1.0);
}
)""";

const char* fss_raycast = R"""(
#version 460 core
out vec4 frag_color;

layout(location = 0) uniform sampler2D tex;
layout(location = 1) uniform ivec2 screen_size;
layout(location = 2) uniform ivec2 light_pos;
layout(location = 3) uniform int light_rad;

float pi = 3.14159265358979323846;

void main() {
    float num_rays = floor(light_rad * pi * 2);
    int pos = int((gl_FragCoord.x - 0.5) + ((gl_FragCoord.y - 0.5) * 128));
    if(pos < num_rays) {
        float theta = (pos / num_rays) * (pi * 2);
        vec2 step = vec2(cos(theta), sin(theta));

        float length = 0.0;

        bool stop = false;
        for(int i = 0; i < 256; i++) {
            if(stop == false && i < light_rad) {
                ivec2 step_pos = ivec2(floor(step.x * i + 0.5), floor(step.y * i + 0.5)) + light_pos;
                vec4 color = texelFetch(tex, step_pos, 0);
                if(color.x != 0.0) {
                    stop = true;
                } else {
                    length++;
                }
            }
        }

        frag_color = vec4(length / 256, 0.0, 0.0, 1.0);
    } else discard;
}
)""";

const char* vss_light = R"""(
#version 460 core
layout(location = 0) in vec2 pos;

void main() {
    gl_Position = vec4(pos, 0.0, 1.0);
}
)""";

const char* fss_light = R"""(
#version 460 core
out vec4 frag_color;

layout(location = 0) uniform sampler2D ray_lengths;
layout(location = 1) uniform ivec2 light_pos;
layout(location = 2) uniform int light_rad;

float pi = 3.14159265358979323846;

void main() {
    vec2 rel_pos = gl_FragCoord.xy - vec2(0.49, 0.49) - light_pos;
    float squared_dist = rel_pos.x * rel_pos.x + rel_pos.y * rel_pos.y;
    if(squared_dist <= light_rad * light_rad) {
        float theta = atan(-rel_pos.y, -rel_pos.x) + pi;
        int ray = int(theta * light_rad);
        int ray_ycoord = ray / 128;
        int ray_xcoord = ray - ray_ycoord * 128;

        float length = texelFetch(ray_lengths, ivec2(ray_xcoord, ray_ycoord), 0).x * 256;

        if(squared_dist <= length * length) {
            float light = max(1.0 - float(squared_dist) / (light_rad * light_rad), 0.3125);
            frag_color = vec4(light, light, light, 1.0);
        } else {
            frag_color = vec4(0.3125, 0.3125, 0.3125, 1.0);
        }
    } else discard;
}
)""";*/

// renderbuffer for depth
/*glGenRenderbuffers(1, &depth_buffer);
glBindRenderbuffer(GL_RENDERBUFFER, depth_buffer);
glRenderbufferStorage(GL_RENDERBUFFER, GL_DEPTH24_STENCIL8, width, height);
glFramebufferRenderbuffer(GL_FRAMEBUFFER, GL_DEPTH_STENCIL_ATTACHMENT, GL_RENDERBUFFER, depth_buffer);

if(glCheckFramebufferStatus(id) == GL_FRAMEBUFFER_COMPLETE) std::cout << "framebuffer complete\n";
else std::cout << "Framebuffer NOT complete\n";*/

raytrace

//glm::ivec2 position((0 - core.camera.pos.x * scale) + screen_size.x / 2, (0 - core.camera.pos.y * scale) + screen_size.y / 2);
//glm::ivec2 mouse_pos_yinv(core.mouse_pos.x, core.screen_size.y - core.mouse_pos.y);

// raycast
/*core.framebuffer_light.bind();

raycast_shader.use();
core.framebuffer.color_tex[1].bind(0, 0);
glUniform2iv(1, 1, &screen_size[0]);
glUniform2iv(2, 1, &position[0]);
glUniform1i(3, 5 * scale);
screen_buffer.bind();
glDrawArrays(GL_TRIANGLES, 0, 6);*/
//

// draw light
/*core.fb_light.bind();
glClearColor(0.3125, 0.3125, 0.3125, 1.0);
glClear(GL_COLOR_BUFFER_BIT);
glClearColor(0.0, 0.0, 0.0, 1.0);

light_shader.use();
core.framebuffer_light.color_tex[0].bind(0, 0);
glUniform2iv(1, 1, &position[0]);
glUniform1i(2, 5 * scale);

screen_buffer.bind();
glDrawArrays(GL_TRIANGLES, 0, 6);*/
//


219
0010 0001 1001

0000 0000 0000 < 1101 1011
0000 0000 0001 < 1011 011
0000 0000 0011 < 0110 11
0000 0000 0110 < 1101 1
0000 0000 1001 + 1101 1
0000 0001 0011 < 1011
0000 0010 0111 < 011
0000 0010 1010 + 011
0000 0101 0100 < 11
0000 1000 0100 + 11
0001 0000 1001 < 1
0001 0000 1100 + 1
0010 0001 1001 < 

int data_len = x * y * c;
        int data_pos = 0;

        std::array<Color_rgba, 64> array;
        array.fill(Color_rgba{0, 0, 0, 0});

        int prev_index = 64;
        Color_rgba prev_color;

        int counter = 0;
        
        while(data_pos < data_len) {
            bool finish = false;
            Color_rgba color = {data[data_pos], data[data_pos + 1], data[data_pos + 2], data[data_pos + 3]};

            if(data_pos != 0 && prev_color == color) {
                prev_index = 64;
                counter++;
            } else {
                int16_t rdif = color.r - prev_color.r;
                int16_t gdif = color.g - prev_color.g;
                int16_t bdif = color.b - prev_color.b;
                int16_t adif = color.a - prev_color.a;

                int16_t drdgdif = rdif - gdif;
                int16_t dbdgdif = bdif - gdif;

                if(adif == 0 && rdif >= -2 && rdif <= 1 && gdif >= -2 && gdif <= 1 && bdif >= -2 && bdif <= 1) {
                    if(counter != 0) {
                        byte_vec.push_back(0xC0 | (counter - 1));
                        counter = 0;
                    }
                    prev_index = 64;

                    byte_vec.push_back(0x40 | ((rdif + 2) << 4) | ((gdif + 2) << 2) | (bdif + 2));
                } else if(adif == 0 && gdif >= -32 && gdif <= 31 && drdgdif >= -8 && drdgdif <= 7 && dbdgdif >= -8 && dbdgdif <= 7) {
                    if(counter != 0) {
                        byte_vec.push_back(0xC0 | (counter - 1));
                        counter = 0;
                    }
                    prev_index = 64;
                    
                    byte_vec.push_back(0x80 | (gdif + 32));
                    byte_vec.push_back(((drdgdif + 8) << 4) | (dbdgdif + 8));
                } else {
                    for(uint8_t i = 0; i < 64; i++) {
                        if(array[i] == color) {
                            if(i == prev_index) {
                                counter++;
                            } else {
                                if(counter != 0) {
                                    byte_vec.push_back(0xC0 | (counter - 1));
                                    counter = 0;
                                }

                                byte_vec.push_back(i);
                                prev_index = i;
                            }

                            finish = true;
                            break;
                        }
                    }
                    
                    if(!finish) {
                        if(counter != 0) {
                            byte_vec.push_back(0xC0 | (counter - 1));
                            counter = 0;
                        }
                        prev_index = 64;

                        byte_vec.push_back(0xFF);
                        byte_vec.push_back(color.r);
                        byte_vec.push_back(color.g);
                        byte_vec.push_back(color.b);
                        byte_vec.push_back(color.a);
                    }
                }
            }

            array[(color.r * 3 + color.g * 5 + color.b * 7 + color.a * 11) % 64] = color;

            prev_color = color;

            data_pos += 4;
        }
        if(counter != 0) {
            byte_vec.push_back(0xC0 | (counter - 1));
            counter = 0;
        }

0.75

signbit -> exponent (2^x, actual value + 127) -> mantissa (binary representation of value to be multiplied by 2^x after binary point)

0 00000000 (1)1000000 00000000 00000000

-3.75
1

1.875 1.1110000

1 10000000 1110000 00000000 00000000
1100 0000 01110000 00000000 00000000
C0 70 00 00

0-0000000 0000-0000 00000000 00000000 00000000 00000000 00000000 00000000

1-1000000 0000-1110 00000000 00000000 00000000 00000000 00000000 00000000

C0 0E 00 00 00 00 00 00
